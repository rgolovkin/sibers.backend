<title>Sibers</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');

  :root {
    --primary-color: #6c63ff;
    --secondary-color: #2e2e2e;
    --background-color: #f0f2f5;
    --text-color: #333;
    --text-color-light: #fff;
    --card-background: #1e1e1e;
    --border-color: #444;
    --delete-color: #e81d1d;
  }

  body {
    font-family: 'Montserrat', sans-serif;
    background: var(--background-color);
    color: var(--text-color);
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
  }

  header {
    width: 100vw;
    background: var(--primary-color);
    padding: 20px 30px;
    color: var(--text-color-light);
    font-size: 22px;
    font-weight: 600;
    box-sizing: border-box;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 10;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
  }

  #profileButton {
    background: var(--text-color-light);
    color: var(--primary-color);
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  #profileButton:hover {
    background: #e9e9e9;
    transform: translateY(-2px);
  }

  .container {
    width: 1100px;
    max-width: 95%;
    margin-top: 110px;
    background: var(--card-background);
    padding: 30px 40px;
    border-radius: 12px;
    box-shadow: 0 4px 25px rgba(0,0,0,0.5);
    color: var(--text-color-light);
    overflow-y: auto;
    max-height: calc(100vh - 140px);
    box-sizing: border-box;
  }

  .filters {
    display: flex;
    gap: 25px;
    margin-bottom: 30px;
    flex-wrap: wrap;
    align-items: flex-end;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    width: 200px;
  }

  .filter-group label {
    font-size: 14px;
    margin-bottom: 8px;
    color: #ccc;
    user-select: none;
  }

  .filters input {
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: #333;
    color: var(--text-color-light);
    font-size: 16px;
    outline: none;
    transition: all 0.3s ease;
  }

  .filters input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 5px rgba(108, 99, 255, 0.5);
  }

  table {
    width: 100%;
    border-collapse: collapse;
    border-radius: 10px;
    overflow: hidden;
  }

  th, td {
    padding: 18px;
    border-bottom: 1px solid var(--border-color);
    text-align: left;
    color: var(--text-color-light);
  }

  th {
    background: rgba(255,255,255,0.08);
    user-select: none;
    position: sticky;
    top: 0;
    font-weight: 700;
  }

  th[data-sort] {
    cursor: pointer;
  }

  th[data-sort].sort-asc::after {
    content: " ▲";
    color: var(--primary-color);
    font-size: 14px;
  }
  th[data-sort].sort-desc::after {
    content: " ▼";
    color: var(--primary-color);
    font-size: 14px;
  }

  td button {
    padding: 8px 16px;
    margin-right: 8px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  td button.edit {
    background: var(--primary-color);
    color: var(--text-color-light);
  }
  td button.delete {
    background: var(--delete-color);
    color: var(--text-color-light);
  }
  td button:hover {
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0,0,0,0.3);
  }

  #pagination {
    margin-top: 30px;
    display: flex;
    justify-content: center;
    gap: 12px;
    flex-wrap: wrap;
  }
  #pagination button {
    padding: 10px 18px;
    border: 2px solid var(--primary-color);
    background: #fff;
    color: var(--primary-color);
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
    min-width: 40px;
    user-select: none;
  }
  #pagination button:hover:not([disabled]) {
    background: var(--primary-color);
    color: var(--text-color-light);
    transform: translateY(-2px);
  }
  #pagination button[disabled] {
    background: var(--primary-color);
    color: var(--text-color-light);
    cursor: default;
    box-shadow: 0 0 12px rgba(108, 99, 255, 0.6);
  }
</style>
</head>
<body>

<header>
  <span>Users Dashboard</span>
  <button id="profileButton">Profile</button>
</header>
<div class="container">
  <div class="filters">
    <div class="filter-group">
      <label for="search">Search</label>
      <input type="text" id="search" placeholder="username, firstname, lastname" autocomplete="off" />
    </div>
    <div class="filter-group">
      <label for="birthFrom">Birthdate From</label>
      <input type="date" id="birthFrom" />
    </div>
    <div class="filter-group">
      <label for="birthTo">Birthdate To</label>
      <input type="date" id="birthTo" />
    </div>
  </div>

  <table id="usersTable" aria-label="Users list">
    <thead>
    <tr>
      <th data-sort="username" tabindex="0" role="button" aria-pressed="false">Username</th>
      <th data-sort="firstName" tabindex="0" role="button" aria-pressed="false">First Name</th>
      <th>Last Name</th>
      <th data-sort="birthdate" tabindex="0" role="button" aria-pressed="false">Birthdate</th>
      <th>Actions</th>
    </tr>
    </thead>
    <tbody></tbody>
  </table>

  <div id="pagination" aria-label="Pagination"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tableBody = document.querySelector('#usersTable tbody');
    const tableHeader = document.querySelector('#usersTable thead');
    const paginationContainer = document.getElementById('pagination');
    const searchInput = document.getElementById('search');
    const birthFromInput = document.getElementById('birthFrom');
    const birthToInput = document.getElementById('birthTo');
    const profileButton = document.getElementById('profileButton');

    let state = {
      currentPage: 1,
      sortBy: 'username',
      sortOrder: 'asc',
      totalUsers: 0,
      limit: 3
    };

    async function loadUsers() {
      const { currentPage, limit, sortBy, sortOrder } = state;
      const params = new URLSearchParams({
        page: currentPage,
        limit,
        sortBy,
        sortOrder
      });

      if (searchInput.value.trim()) params.append('search', searchInput.value.trim());
      if (birthFromInput.value) params.append('birthdateFrom', birthFromInput.value);
      if (birthToInput.value) params.append('birthdateTo', birthToInput.value);

      try {
        const res = await fetch(`/api/v1/users/list?${params}`, {
          headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
        });
        if (!res.ok) throw new Error('Failed to load users');

        const data = await res.json();
        state.totalUsers = data.total;

        renderTable(data.users);
        renderPagination();
      } catch (e) {
        tableBody.innerHTML = '<tr><td colspan="5" style="text-align:center; color:#e81d1d;">Error loading users</td></tr>';
        paginationContainer.innerHTML = '';
        console.error(e);
      }
    }

    function renderTable(users) {
      tableBody.innerHTML = '';
      if (users.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="5" style="text-align:center; color:#bbb;">No users found</td></tr>';
      } else {
        users.forEach(user => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${user.username}</td>
            <td>${user.firstName}</td>
            <td>${user.lastName}</td>
            <td>${user.birthdate.slice(0, 10)}</td>
            <td>
              <button class="edit" data-id="${user.id}">Edit</button>
              <button class="delete" data-id="${user.id}">Delete</button>
            </td>
          `;
          tableBody.appendChild(tr);
        });
      }
    }

    function renderPagination() {
      const totalPages = Math.ceil(state.totalUsers / state.limit);
      const { currentPage } = state;

      paginationContainer.innerHTML = '';

      const prevBtn = document.createElement('button');
      prevBtn.textContent = '«';
      prevBtn.disabled = currentPage === 1;
      prevBtn.addEventListener('click', () => {
        state.currentPage--;
        loadUsers();
      });
      paginationContainer.appendChild(prevBtn);

      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement('button');
        btn.textContent = i;
        btn.disabled = i === currentPage;
        btn.addEventListener('click', () => {
          if (i !== currentPage) {
            state.currentPage = i;
            loadUsers();
          }
        });
        paginationContainer.appendChild(btn);
      }

      const nextBtn = document.createElement('button');
      nextBtn.textContent = '»';
      nextBtn.disabled = currentPage === totalPages;
      nextBtn.addEventListener('click', () => {
        state.currentPage++;
        loadUsers();
      });
      paginationContainer.appendChild(nextBtn);
    }

    tableBody.addEventListener('click', async (e) => {
      const target = e.target;
      if (target.classList.contains('edit')) {
        const userId = target.getAttribute('data-id');
        window.location.href = `/profile/${userId}`;
      } else if (target.classList.contains('delete')) {
        const userId = target.getAttribute('data-id');
        if (!confirm('Delete this user?')) return;
        try {
          const res = await fetch(`/api/v1/users/delete/${userId}`, {
            method: 'DELETE',
            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
          });
          if (!res.ok) throw new Error('Failed to delete user');

          await loadUsers();
        } catch (e) {
          alert('Error deleting user');
        }
      }
    });

    tableHeader.addEventListener('click', (e) => {
      const th = e.target.closest('th');
      const field = th ? th.dataset.sort : null;
      if (!field || field === 'lastName') return;

      document.querySelectorAll('#usersTable th').forEach(h => {
        if (h !== th) {
          h.classList.remove('sort-asc', 'sort-desc');
          h.ariaPressed = 'false';
        }
      });

      if (state.sortBy === field) {
        state.sortOrder = state.sortOrder === 'asc' ? 'desc' : 'asc';
      } else {
        state.sortBy = field;
        state.sortOrder = 'asc';
      }

      th.classList.add(state.sortOrder === 'asc' ? 'sort-asc' : 'sort-desc');
      th.ariaPressed = 'true';
      state.currentPage = 1;
      loadUsers();
    });

    searchInput.addEventListener('input', () => {
      state.currentPage = 1;
      loadUsers();
    });
    birthFromInput.addEventListener('change', () => {
      state.currentPage = 1;
      loadUsers();
    });
    birthToInput.addEventListener('change', () => {
      state.currentPage = 1;
      loadUsers();
    });
    profileButton.addEventListener('click', () => {
      window.location.href = '/profile';
    });

    loadUsers();
  });
</script>
